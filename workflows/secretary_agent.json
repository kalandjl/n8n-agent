{
  "name": "Comprehensive Secretary Agent",
  "description": "An AI-powered secretary agent that handles both chat and voice inputs. It can schedule/reschedule meetings using Google Calendar, answer company questions from a knowledge base, check Gmail for context, and respond via chat or voice. The workflow includes robust error handling and intent analysis using ChatGPT.",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "secretary-agent",
        "options": {
          "allHeaders": true,
          "rawBody": true
        },
        "notes": "Main entry point for the secretary agent. Accepts both text chat messages and audio files for voice input. Expected payload: {\"type\": \"chat|voice\", \"content\": \"text message or base64 audio\", \"sessionId\": \"unique-session-id\"}"
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "id": "webhook-trigger"
    },
    {
      "parameters": {
        "conditions": [
          {
            "value1": "={{ $json.type }}",
            "operation": "equal",
            "value2": "voice"
          }
        ],
        "notes": "Determines if input is voice or chat to route appropriately"
      },
      "name": "Check Input Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300],
      "id": "check-input-type"
    },
    {
      "parameters": {
        "model": "whisper-1",
        "audioData": "={{ $json.content }}",
        "responseFormat": "json",
        "authentication": "predefinedCredentialType",
        "credentialType": "openAiApi",
        "notes": "Transcribes voice input to text using OpenAI Whisper. Requires OpenAI API credentials configured in n8n.",
        "continueOnError": true
      },
      "name": "Transcribe Voice to Text",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [650, 200],
      "id": "transcribe-voice"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "transcribedText",
            "value": "={{ $json.text }}"
          },
          {
            "name": "originalType",
            "value": "voice"
          },
          {
            "name": "sessionId",
            "value": "={{ $node[\"Webhook Trigger\"].json.sessionId }}"
          }
        ],
        "notes": "Standardizes voice input data structure"
      },
      "name": "Set Voice Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [850, 200],
      "id": "set-voice-data"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "transcribedText",
            "value": "={{ $json.content }}"
          },
          {
            "name": "originalType",
            "value": "chat"
          },
          {
            "name": "sessionId",
            "value": "={{ $json.sessionId }}"
          }
        ],
        "notes": "Standardizes chat input data structure"
      },
      "name": "Set Chat Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [650, 400],
      "id": "set-chat-data"
    },
    {
      "parameters": {
        "notes": "Error handler for voice transcription failures. Logs error and prepares fallback response.",
        "continueOnError": false
      },
      "name": "Voice Transcription Error",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [850, 100],
      "id": "voice-error"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "mergeByPosition",
        "notes": "Merges both voice and chat paths into a single flow"
      },
      "name": "Merge Input Paths",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1050, 300],
      "id": "merge-inputs"
    },
    {
      "parameters": {
        "model": "gpt-4",
        "messages": [
          {
            "role": "system",
            "content": "You are an intelligent secretary agent. Analyze the user's intent and categorize it into one of these actions:\n1. SCHEDULE - User wants to schedule a new meeting/appointment\n2. RESCHEDULE - User wants to change an existing meeting\n3. CHECK_CALENDAR - User wants to know about their schedule\n4. COMPANY_INFO - User has questions about the company\n5. EMAIL_CONTEXT - Intent requires checking email history\n6. GENERAL_CHAT - General conversation\n\nAlso extract relevant entities like dates, times, participants, and topics. Return a JSON object with: {\"intent\": \"ACTION\", \"entities\": {}, \"requiresEmailContext\": true/false, \"response\": \"preliminary response\"}"
          },
          {
            "role": "user",
            "content": "={{ $json.transcribedText }}"
          }
        ],
        "responseFormat": "json_object",
        "authentication": "predefinedCredentialType",
        "credentialType": "openAiApi",
        "notes": "Core AI analysis using ChatGPT to understand user intent and extract entities. This is the brain of the secretary agent.",
        "continueOnError": true
      },
      "name": "Analyze Intent with AI",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1250, 300],
      "id": "analyze-intent"
    },
    {
      "parameters": {
        "notes": "Fallback for AI intent analysis failures",
        "continueOnError": false
      },
      "name": "Intent Analysis Error",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1450, 200],
      "id": "intent-error"
    },
    {
      "parameters": {
        "conditions": [
          {
            "value1": "={{ $json.requiresEmailContext }}",
            "operation": "equal",
            "value2": true
          }
        ],
        "notes": "Checks if email context is needed based on intent analysis"
      },
      "name": "Check Email Context Required",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1450, 300],
      "id": "check-email-context"
    },
    {
      "parameters": {
        "query": "={{ $json.entities.searchQuery || $json.entities.topic || $json.transcribedText }}",
        "maxResults": 5,
        "authentication": "oAuth2",
        "notes": "Searches Gmail for relevant context based on the conversation topic. Requires Gmail OAuth2 credentials.",
        "continueOnError": true
      },
      "name": "Search Gmail for Context",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [1650, 200],
      "id": "search-gmail"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "emailContext",
            "value": "={{ $json }}"
          },
          {
            "name": "originalIntent",
            "value": "={{ $node[\"Analyze Intent with AI\"].json }}"
          }
        ],
        "notes": "Preserves email context for later use"
      },
      "name": "Set Email Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1850, 200],
      "id": "set-email-context"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "emailContext",
            "value": "No email context needed"
          },
          {
            "name": "originalIntent",
            "value": "={{ $json }}"
          }
        ],
        "notes": "Sets empty email context when not needed"
      },
      "name": "Set No Email Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1650, 400],
      "id": "set-no-email"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "mergeByPosition",
        "notes": "Merges email context paths"
      },
      "name": "Merge Email Paths",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [2050, 300],
      "id": "merge-email"
    },
    {
      "parameters": {
        "conditions": [
          {
            "value1": "={{ $json.originalIntent.intent }}",
            "operation": "oneOf",
            "value2": "SCHEDULE,RESCHEDULE,CHECK_CALENDAR"
          }
        ],
        "notes": "Routes to calendar operations if intent is calendar-related"
      },
      "name": "Check Calendar Intent",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2250, 300],
      "id": "check-calendar-intent"
    },
    {
      "parameters": {
        "conditions": [
          {
            "value1": "={{ $json.originalIntent.intent }}",
            "operation": "equal",
            "value2": "SCHEDULE"
          }
        ],
        "notes": "Further routing for specific calendar operations"
      },
      "name": "Route Calendar Action",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2450, 200],
      "id": "route-calendar"
    },
    {
      "parameters": {
        "calendarId": "{{ ENV.GOOGLE_CALENDAR_ID }}",
        "summary": "={{ $json.originalIntent.entities.title || 'Meeting' }}",
        "start": "={{ $json.originalIntent.entities.startTime }}",
        "end": "={{ $json.originalIntent.entities.endTime }}",
        "attendees": "={{ $json.originalIntent.entities.attendees || [] }}",
        "description": "={{ $json.originalIntent.entities.description || 'Scheduled by AI Secretary' }}",
        "authentication": "oAuth2",
        "notes": "Creates a new calendar event. Requires Google Calendar OAuth2 credentials and calendar ID as environment variable.",
        "continueOnError": true
      },
      "name": "Create Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [2650, 100],
      "id": "create-event"
    },
    {
      "parameters": {
        "calendarId": "{{ ENV.GOOGLE_CALENDAR_ID }}",
        "timeMin": "={{ $now.minus(7, 'days').toISO() }}",
        "timeMax": "={{ $now.plus(30, 'days').toISO() }}",
        "authentication": "oAuth2",
        "notes": "Retrieves calendar events for checking or rescheduling. Looks at past week and next 30 days.",
        "continueOnError": true
      },
      "name": "Get Calendar Events",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [2650, 300],
      "id": "get-events"
    },
    {
      "parameters": {
        "notes": "Error handler for calendar operations"
      },
      "name": "Calendar Operation Error",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2850, 200],
      "id": "calendar-error"
    },
    {
      "parameters": {
        "conditions": [
          {
            "value1": "={{ $json.originalIntent.intent }}",
            "operation": "equal",
            "value2": "COMPANY_INFO"
          }
        ],
        "notes": "Routes to company knowledge base lookup"
      },
      "name": "Check Company Info Intent",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2450, 400],
      "id": "check-company-intent"
    },
    {
      "parameters": {
        "filePath": "{{ ENV.COMPANY_INFO_FILE_PATH }}",
        "options": {
          "encoding": "utf8"
        },
        "notes": "Reads company information from a predefined text file. File path should be set as environment variable.",
        "continueOnError": true
      },
      "name": "Read Company Info File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [2650, 500],
      "id": "read-company-file"
    },
    {
      "parameters": {
        "notes": "Error handler for file reading operations"
      },
      "name": "File Read Error",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2850, 600],
      "id": "file-error"
    },
    {
      "parameters": {
        "mode": "multiplex",
        "notes": "Collects all operation results"
      },
      "name": "Collect All Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [3050, 300],
      "id": "collect-results"
    },
    {
      "parameters": {
        "model": "gpt-4",
        "messages": [
          {
            "role": "system",
            "content": "You are a helpful secretary. Based on the user's request, the intent analysis, any email context, and the operation results, provide a comprehensive and friendly response. If calendar operations were performed, summarize what was done. If company info was requested, answer based on the file content. Always be professional and helpful."
          },
          {
            "role": "user",
            "content": "User request: {{ $node[\"Merge Input Paths\"].json.transcribedText }}\n\nIntent: {{ $json.originalIntent }}\n\nEmail Context: {{ $json.emailContext }}\n\nOperation Results: {{ $json }}"
          }
        ],
        "authentication": "predefinedCredentialType",
        "credentialType": "openAiApi",
        "notes": "Generates the final response based on all gathered information and operations performed.",
        "continueOnError": true
      },
      "name": "Generate Final Response",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [3250, 300],
      "id": "generate-response"
    },
    {
      "parameters": {
        "conditions": [
          {
            "value1": "={{ $node[\"Merge Input Paths\"].json.originalType }}",
            "operation": "equal",
            "value2": "voice"
          }
        ],
        "notes": "Determines if response should be voice or text"
      },
      "name": "Check Response Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [3450, 300],
      "id": "check-response-type"
    },
    {
      "parameters": {
        "model": "tts-1",
        "voice": "nova",
        "text": "={{ $json.choices[0].message.content }}",
        "authentication": "predefinedCredentialType",
        "credentialType": "openAiApi",
        "notes": "Converts text response to speech for voice inputs. Uses OpenAI TTS.",
        "continueOnError": true
      },
      "name": "Convert Response to Speech",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [3650, 200],
      "id": "text-to-speech"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "response",
            "value": "={{ $json.choices[0].message.content }}"
          },
          {
            "name": "type",
            "value": "text"
          },
          {
            "name": "sessionId",
            "value": "={{ $node[\"Merge Input Paths\"].json.sessionId }}"
          }
        ],
        "notes": "Prepares text response format"
      },
      "name": "Prepare Text Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [3650, 400],
      "id": "prepare-text"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "response",
            "value": "={{ $json.audio }}"
          },
          {
            "name": "type",
            "value": "audio"
          },
          {
            "name": "sessionId",
            "value": "={{ $node[\"Merge Input Paths\"].json.sessionId }}"
          }
        ],
        "notes": "Prepares voice response format"
      },
      "name": "Prepare Voice Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [3850, 200],
      "id": "prepare-voice"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "error",
            "value": "I apologize, but I encountered an error processing your request. Please try again."
          },
          {
            "name": "type",
            "value": "error"
          }
        ],
        "notes": "Fallback error response preparation"
      },
      "name": "Prepare Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [3850, 100],
      "id": "prepare-error"
    },
    {
      "parameters": {
        "mode": "multiplex",
        "notes": "Collects all response types"
      },
      "name": "Merge Response Types",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [4050, 300],
      "id": "merge-responses"
    },
    {
      "parameters": {
        "responseCode": 200,
        "responseData": "={{ $json }}",
        "options": {
          "responseHeaders": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "notes": "Sends the final response back to the webhook caller"
      },
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [4250, 300],
      "id": "respond-webhook"
    },
    {
      "parameters": {
        "webhookUrl": "{{ ENV.ERROR_NOTIFICATION_WEBHOOK }}",
        "method": "POST",
        "body": {
          "text": "Secretary Agent Error: {{ $json.error }}",
          "sessionId": "={{ $json.sessionId }}",
          "timestamp": "={{ $now.toISO() }}"
        },
        "notes": "Optional error notification to Slack or monitoring service. Set webhook URL as environment variable.",
        "continueOnError": true
      },
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [4250, 500],
      "id": "error-notification"
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Check Input Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Input Type": {
      "main": [
        [
          {
            "node": "Transcribe Voice to Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Chat Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Voice to Text": {
      "main": [
        [
          {
            "node": "Set Voice Data",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Voice Transcription Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Voice Data": {
      "main": [
        [
          {
            "node": "Merge Input Paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Chat Data": {
      "main": [
        [
          {
            "node": "Merge Input Paths",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Voice Transcription Error": {
      "main": [
        [
          {
            "node": "Prepare Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Input Paths": {
      "main": [
        [
          {
            "node": "Analyze Intent with AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Intent with AI": {
      "main": [
        [
          {
            "node": "Check Email Context Required",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Intent Analysis Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intent Analysis Error": {
      "main": [
        [
          {
            "node": "Prepare Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Email Context Required": {
      "main": [
        [
          {
            "node": "Search Gmail for Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set No Email Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Gmail for Context": {
      "main": [
        [
          {
            "node": "Set Email Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Email Context": {
      "main": [
        [
          {
            "node": "Merge Email Paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set No Email Context": {
      "main": [
        [
          {
            "node": "Merge Email Paths",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Email Paths": {
      "main": [
        [
          {
            "node": "Check Calendar Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Calendar Intent": {
      "main": [
        [
          {
            "node": "Route Calendar Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Company Info Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Calendar Action": {
      "main": [
        [
          {
            "node": "Create Calendar Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Calendar Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event": {
      "main": [
        [
          {
            "node": "Collect All Results",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Calendar Operation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Calendar Events": {
      "main": [
        [
          {
            "node": "Collect All Results",
            "type": "main",
            "index": 1
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Calendar Operation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Operation Error": {
      "main": [
        [
          {
            "node": "Collect All Results",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Check Company Info Intent": {
      "main": [
        [
          {
            "node": "Read Company Info File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Collect All Results",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Read Company Info File": {
      "main": [
        [
          {
            "node": "Collect All Results",
            "type": "main",
            "index": 4
          }
        ]
      ],
      "error": [
        [
          {
            "node": "File Read Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Read Error": {
      "main": [
        [
          {
            "node": "Collect All Results",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Collect All Results": {
      "main": [
        [
          {
            "node": "Generate Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Final Response": {
      "main": [
        [
          {
            "node": "Check Response Type",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Prepare Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Response Type": {
      "main": [
        [
          {
            "node": "Convert Response to Speech",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Text Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Response to Speech": {
      "main": [
        [
          {
            "node": "Prepare Voice Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Prepare Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Voice Response": {
      "main": [
        [
          {
            "node": "Merge Response Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text Response": {
      "main": [
        [
          {
            "node": "Merge Response Types",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Prepare Error Response": {
      "main": [
        [
          {
            "node": "Merge Response Types",
            "type": "main",
            "index": 2
          },
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Response Types": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "staticData": null,
  "pinData": {},
  "versionId": "1.0.0"
}