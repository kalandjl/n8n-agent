{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "secretary-agent",
        "responseMode": "responseNode",
        "options": {},
        "notes": "Webhook trigger that accepts both text chat messages and audio files. Expects JSON payload with 'message' field for text or 'audio' field with base64 encoded audio data."
      },
      "name": "Secretary Agent Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "id": "webhook1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "{{ $json.body.audio }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "notes": "Determines if input is audio (voice) or text (chat) based on presence of audio field in webhook payload."
      },
      "name": "Check Input Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "if1"
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "authentication": "headerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.OPENAI_API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "value": "{{ $json.body.audio }}"
            },
            {
              "name": "model",
              "value": "whisper-1"
            }
          ]
        },
        "options": {
          "bodyContentType": "multipart-form-data"
        },
        "notes": "Transcribes audio input using OpenAI Whisper API. Continue on error enabled to handle transcription failures gracefully.",
        "continueOnError": true
      },
      "name": "Transcribe Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 200],
      "id": "transcribe1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "user_message",
              "name": "user_message",
              "value": "{{ $json.text }}",
              "type": "string"
            },
            {
              "id": "input_type",
              "name": "input_type",
              "value": "voice",
              "type": "string"
            }
          ]
        },
        "options": {},
        "notes": "Standardizes transcribed audio input into user_message format and marks input type as voice."
      },
      "name": "Set Transcribed Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [900, 200],
      "id": "set1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "user_message",
              "name": "user_message",
              "value": "{{ $json.body.message }}",
              "type": "string"
            },
            {
              "id": "input_type",
              "name": "input_type",
              "value": "chat",
              "type": "string"
            }
          ]
        },
        "options": {},
        "notes": "Standardizes text chat input into user_message format and marks input type as chat."
      },
      "name": "Set Chat Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [680, 400],
      "id": "set2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {},
        "notes": "Merges both voice and chat processing paths back together before intent analysis."
      },
      "name": "Merge Input Types",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [1120, 300],
      "id": "merge1"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "read",
        "fileId": {
          "__rl": true,
          "value": "{{ $vars.COMPANY_INFO_FILE_ID }}",
          "mode": "id"
        },
        "options": {},
        "notes": "Reads company information from Google Drive file to provide context for AI responses. Requires COMPANY_INFO_FILE_ID environment variable."
      },
      "name": "Load Company Info",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [1340, 300],
      "id": "gdrive1"
    },
    {
      "parameters": {
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a professional secretary assistant. Based on the user's message, determine the intent and provide appropriate responses. Company information: {{ $node['Load Company Info'].json.data }}\n\nFor scheduling requests, respond with structured data in this format:\n{\n  \"intent\": \"schedule\",\n  \"action\": \"create|reschedule|cancel|query\",\n  \"details\": {\n    \"date\": \"YYYY-MM-DD\",\n    \"time\": \"HH:MM\",\n    \"duration\": \"minutes\",\n    \"title\": \"meeting title\",\n    \"description\": \"details\"\n  },\n  \"response\": \"human-readable response\"\n}\n\nFor general questions, respond with:\n{\n  \"intent\": \"question\",\n  \"response\": \"detailed answer based on company info\"\n}"
            },
            {
              "role": "user",
              "content": "{{ $json.user_message }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7
        },
        "notes": "Analyzes user intent using GPT-4 and company context. Provides structured responses for scheduling or general Q&A.",
        "continueOnError": true
      },
      "name": "Analyze Intent with AI",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [1560, 300],
      "id": "openai1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "{{ $json.choices[0].message.content | fromJson | get('intent') }}",
              "rightValue": "schedule",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "notes": "Routes to calendar operations if intent is scheduling-related, otherwise handles as general Q&A."
      },
      "name": "Check Intent Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1780, 300],
      "id": "if2"
    },
    {
      "parameters": {
        "operation": "create",
        "calendarId": {
          "__rl": true,
          "value": "{{ $vars.GOOGLE_CALENDAR_ID }}",
          "mode": "id"
        },
        "start": "{{ $json.choices[0].message.content | fromJson | get('details.date') }}T{{ $json.choices[0].message.content | fromJson | get('details.time') }}:00",
        "end": "{{ $json.choices[0].message.content | fromJson | get('details.date') }}T{{ ($json.choices[0].message.content | fromJson | get('details.time') | split(':') | first | toNumber) + (($json.choices[0].message.content | fromJson | get('details.duration') | toNumber) / 60) | floor }}:{{ (($json.choices[0].message.content | fromJson | get('details.duration') | toNumber) % 60) | padStart(2, '0') }}:00",
        "summary": "{{ $json.choices[0].message.content | fromJson | get('details.title') }}",
        "description": "{{ $json.choices[0].message.content | fromJson | get('details.description') }}",
        "options": {},
        "notes": "Creates calendar event using Google Calendar API. Requires GOOGLE_CALENDAR_ID environment variable. Continue on error to handle calendar conflicts gracefully.",
        "continueOnError": true
      },
      "name": "Create Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 2,
      "position": [2000, 200],
      "id": "gcal1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "response_message",
              "name": "response_message",
              "value": "{{ $json.choices[0].message.content | fromJson | get('response') }}",
              "type": "string"
            },
            {
              "id": "calendar_created",
              "name": "calendar_created",
              "value": "{{ $node['Create Calendar Event'].json.id ? 'true' : 'false' }}",
              "type": "string"
            }
          ]
        },
        "options": {},
        "notes": "Prepares scheduling response message and tracks calendar creation success."
      },
      "name": "Set Schedule Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2220, 200],
      "id": "set3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "response_message",
              "name": "response_message",
              "value": "{{ $json.choices[0].message.content | fromJson | get('response') }}",
              "type": "string"
            }
          ]
        },
        "options": {},
        "notes": "Prepares general Q&A response message from AI analysis."
      },
      "name": "Set General Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2000, 400],
      "id": "set4"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {},
        "notes": "Merges scheduling and general response paths before output formatting."
      },
      "name": "Merge Responses",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [2440, 300],
      "id": "merge2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "{{ $node['Merge Input Types'].json.input_type }}",
              "rightValue": "voice",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "notes": "Determines output format based on original input type - voice input gets audio response, chat gets text."
      },
      "name": "Check Output Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2660, 300],
      "id": "if3"
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/audio/speech",
        "authentication": "headerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.OPENAI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "body": {
          "model": "tts-1",
          "input": "{{ $json.response_message }}",
          "voice": "nova",
          "response_format": "mp3"
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        },
        "notes": "Converts text response to speech using OpenAI TTS API for voice input requests. Continue on error to fallback to text if TTS fails.",
        "continueOnError": true
      },
      "name": "Generate Audio Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2880, 200],
      "id": "tts1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{{ { \"type\": \"audio\", \"message\": $json.response_message, \"audio_data\": $json.data } }}",
        "options": {},
        "notes": "Returns audio response with base64 encoded audio data for voice inputs."
      },
      "name": "Respond with Audio",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3100, 200],
      "id": "respond1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{{ { \"type\": \"text\", \"message\": $json.response_message } }}",
        "options": {},
        "notes": "Returns text response for chat inputs."
      },
      "name": "Respond with Text",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2880, 400],
      "id": "respond2"
    },
    {
      "parameters": {
        "notes": "Error handling path for transcription failures. Provides fallback text response when audio processing fails."
      },
      "name": "Transcription Error Handler",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [900, 100],
      "id": "noop1"
    },
    {
      "parameters": {
        "notes": "Error handling path for AI analysis failures. Provides fallback generic response when OpenAI API fails."
      },
      "name": "AI Analysis Error Handler",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1560, 100],
      "id": "noop2"
    },
    {
      "parameters": {
        "notes": "Error handling path for calendar creation failures. Logs scheduling errors and provides user feedback."
      },
      "name": "Calendar Error Handler",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2000, 100],
      "id": "noop3"
    },
    {
      "parameters": {
        "notes": "Error handling path for TTS failures. Falls back to text response when speech generation fails."
      },
      "name": "TTS Error Handler",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2880, 100],
      "id": "noop4"
    }
  ],
  "connections": {
    "Secretary Agent Webhook": {
      "main": [
        [
          {
            "node": "Check Input Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Input Type": {
      "main": [
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Chat Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Set Transcribed Message",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Transcription Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Transcribed Message": {
      "main": [
        [
          {
            "node": "Merge Input Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Chat Message": {
      "main": [
        [
          {
            "node": "Merge Input Types",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Input Types": {
      "main": [
        [
          {
            "node": "Load Company Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Company Info": {
      "main": [
        [
          {
            "node": "Analyze Intent with AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Intent with AI": {
      "main": [
        [
          {
            "node": "Check Intent Type",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "AI Analysis Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Intent Type": {
      "main": [
        [
          {
            "node": "Create Calendar Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set General Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event": {
      "main": [
        [
          {
            "node": "Set Schedule Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Calendar Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schedule Response": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set General Response": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Responses": {
      "main": [
        [
          {
            "node": "Check Output Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Output Type": {
      "main": [
        [
          {
            "node": "Generate Audio Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond with Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio Response": {
      "main": [
        [
          {
            "node": "Respond with Audio",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "TTS Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "name": "AI Secretary Agent with Voice & Chat",
  "description": "Comprehensive secretary agent that handles both voice and text inputs. Transcribes speech, analyzes intent using AI with company context, manages calendar scheduling, and responds in the same format as the input (voice-to-voice, text-to-text). Includes robust error handling for all API calls and graceful fallbacks. Requires environment variables: OPENAI_API_KEY, GOOGLE_CALENDAR_ID, and COMPANY_INFO_FILE_ID.",
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1"
}